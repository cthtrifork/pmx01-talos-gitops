---
# yaml-language-server: $schema=https://datreeio.github.io/CRDs-catalog/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: cilium
  namespace: kube-system
spec:
  interval: 10m
  install:
    crds: CreateReplace
    remediation:
      retries: 3
  upgrade:
    crds: CreateReplace
    remediation:
      retries: -1 # retry indefinitely
  chart:
    spec:
      chart: cilium
      version: 1.17.6
      sourceRef:
        kind: HelmRepository
        name: cilium
  driftDetection:
    mode: enabled
  # https://github.com/cilium/cilium/blob/main/install/kubernetes/cilium/values.yaml
  values:
    securityContext:
      capabilities:
        ciliumAgent: {CHOWN,KILL,NET_ADMIN,NET_RAW,IPC_LOCK,SYS_ADMIN,SYS_RESOURCE,DAC_OVERRIDE,FOWNER,SETGID,SETUID}
        cleanCiliumState: {NET_ADMIN,SYS_ADMIN,SYS_RESOURCE}
    cgroup:
      autoMount:
        enabled: false
      hostRoot: /sys/fs/cgroup
    cluster:
      name: ${CLUSTER_NAME:=default}
      id: ${CLUSTER_ID:=0}
    # kubernetes-in-docker hacks
    ipv4:
      enabled: true
    ipv6:
      enabled: false
    nodePort:
      enabled: false
    hostPort:
      enabled: false
    ipam:
      mode: kubernetes
    # Agent resource limits & requests
    resources:
      limits:
        memory: 1Gi
      requests:
        cpu: 100m
        memory: 256Mi
    envoy:
      resources:
        limits:
          memory: 512Mi
        requests:
          cpu: 20m
          memory: 64Mi
    hubble:
      relay:
        enabled: ${CILIUM_HUBBLE_RELAY_ENABLED:=true}
        podDisruptionBudget:
          enabled: false
        resources:
          limits:
            cpu: 100m
            memory: 512Mi
          requests:
            cpu: 5m
            memory: 64Mi
      ui:
        enabled: ${CILIUM_HUBBLE_UI_ENABLED:=true}
        podDisruptionBudget:
          enabled: false
      tls:
        auto:
          enabled: false  # enable automatic TLS certificate generation
          method: certmanager  #  auto generate certificates using cert-manager
          certValidityDuration: 1095  #  certificates validity duration in days (default 3 years)
          certManagerIssuerRef:
            group: cert-manager.io  # Reference to cert-manager's issuer
            kind: ClusterIssuer
            name: certificate-cluster-issuer  # certificate-cluster-issuer
        server:
          extraDnsNames:
            - "*.default.hubble-grpc.cilium.io"
        frontend:
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 5m
              memory: 64Mi
        backend:
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 10m
              memory: 64Mi
    clustermesh:
      apiserver:
        podDisruptionBudget:
          enabled: false
          maxUnavailable: 1
        tls:
          auto:
            enabled: true
            method: certmanager  #  auto generate certificates using cert-manager
            certValidityDuration: 1095  #  certificates validity duration in days (default 3 years)
            certManagerIssuerRef:
              group: cert-manager.io  # Reference to cert-manager's issuer
              kind: ClusterIssuer
              name: certificate-cluster-issuer  # certificate-cluster-issuer
    operator:
      replicas: 1
      podDisruptionBudget:
        enabled: true
        maxUnavailable: 50%
      prometheus:
        metricsService: true
        enabled: true
        serviceMonitor:
          enabled: true
      resources:
        limits:
          memory: 512Mi
        requests:
          cpu: ${CILIUM_OPERATOR_CPU_REQUEST:=100m}
          memory: ${CILIUM_OPERATOR_MEMORY_REQUEST:=256Mi}
    prometheus:
      metricsService: false
      enabled: false
      serviceMonitor:
        enabled: false
        trustCRDsExist: true
    dashboards:
      enabled: false
    kubeProxyReplacement: true
    encryption:
      enabled: true
      type: wireguard
    k8sServiceHost: localhost 
    k8sServicePort: "7445"
    egressGateway:
      enabled: false
    bpf:
      masquerade: true
    l2announcements:
      enabled: true
    externalIPs:
      enabled: true
    policyEnforcementMode: always  # enforce network policies (default deny basically)
    policyAuditMode: true  # NEVER SET THIS TO TRUE IN PRODUCTION, as it will disable all network policies and allow all traffic  
